@model zavrsni.Models.PageDetailModel
@using zavrsni.Helpers
@{
    ViewBag.Title = "Details";
    int contributors = Model.Contributors.Count;
    int contrBr = 1;
}

<h2>@Model.PageName (avg. @Model.AverageGrade)</h2>
<h4><span style="color: #BFBFBF;"><span class="glyphicon glyphicon-user" aria-hidden="true"></span>@Model.PageAuthor</span> + @foreach (var c in Model.Contributors)
{
    <span style="color: #BFBFBF;">
<span class="glyphicon glyphicon-user" aria-hidden="true"></span><span style="font-family: Calibri;">@c.Username</span></span>
    if (contrBr < contributors)
    {
        <span>, </span>
    }
        contrBr++;
}
                                                                                                                                                            </h4>
@if (Request.IsAuthenticated)
        {
            using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-md-3" style="margin-top: 18px;">
            @Html.DropDownListFor(model => model.Grade, new SelectList(
                            new List<Object>
                            {
                                new {value = 1, text = "1"},
                                new {value = 2, text = "2"},
                                new {value = 3, text = "3"},
                                new {value = 4, text = "4"},
                                new {value = 5, text = "5"}
                            },
                            "value",
                            "text",
                            2), "Select your mark:", new { @class = "form-control" })
        </div>
        <div class="col-md-3" style="margin-top: 18px;">
            <div class="form-group">
                <input type="submit" class="btn btn-default" value="Submit" />
            </div>
        </div>
    </div>
            }
        }
<div class="row">

    <div class="form-group">
        <div class="col-md-12">
            <input type="submit" id="submit2" class="btn btn-default" value="Save contents layout" />
            <a href="@Url.Action("Index", "Page", new {Username = Model.Username})"><span class="btn btn-default">Return to pages list</span></a>
        </div>
    </div>
</div>

@if (!Request.IsAuthenticated)
{
    <div class="form-group">
        <div class="col-md-12">
            @Html.ActionLink("Return to homepage", "Index", "Home", new {area = ""}, new {@class = "btn btn-default"})
        </div>
    </div>
}

@{
    int brojac = 0;
}

@foreach (var c in Model.PageContents.GroupBy(a => a.City.CityName))
{
    <p>
        <h3>@c.Key</h3>
    </p>
    
    @*<div class="row">
        <div id="container" class="js-masonry" data-masonry-options='{ "columnWidth": 280, "itemSelector": ".item" }'>
            @foreach (var item in c)
            {
                <div class="col-md-4 col-sm-6 item">
                    <div class="thumbnail content" style="padding: 2px 2px 2px 2px !important;">
                        <div class="caption" style="padding: 3px 3px 3px 3px !important;">
                            <h2>@item.Content.Title</h2>
                            @Html.Raw(item.Content.Text.ParseHTML().Truncate())
                            @if (item.Content.Text.ParseHTML().Truncate().Contains("..."))
                            {
                                <span> (<a href="@Url.Action("Details", "Content", new {IDcontent = item.Content.IDcontent, Username = Model.Username})">more</a>)</span>
                            }
                            @if (Request.IsAuthenticated)
                            {
                                <div class="text-right">
                                    <a href="@Url.Action("Edit", "Content", new {IDcontent = item.Content.IDcontent, Username = Model.Username})" target="_blank"><span class="btn btn-special glyphicon glyphicon-pencil" aria-hidden="true"></span></a>
                                    <a href="@Url.Action("Details", "Content", new {IDcontent = item.Content.IDcontent, Username = Model.Username})" target="_blank"><span class="btn btn-special glyphicon glyphicon-list" aria-hidden="true"></span></a>
                                    <a href="@Url.Action("DeleteContent", "Page", new {IDcontent = item.Content.IDcontent, IDpage = Model.IDpage, Username = Model.Username})"><span class="btn btn-special glyphicon glyphicon-remove" aria-hidden="true"></span></a>
                                </div>
                            }
                            else
                            {
                                <div class="text-right">
                                    <a href="@Url.Action("Details", "Content", new {IDcontent = item.Content.IDcontent, Username = Model.Username})" target="_blank"><span class="btn btn-special glyphicon glyphicon-list" aria-hidden="true"></span></a>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>*@

    <div id="gr-@brojac" class="gridster">
        <ul>
            @{
                int? col = 1;
                int? row = 1;
                int? dataSizeX = 6;
                int? dataSizeY = 8;
                int? colR = 1;
                int? rowR = 1;
            }
            @foreach (var item in c)
            {
                if (item.Content.DataRow != null)
                {
                    row = item.Content.DataRow;
                }
                else
                {
                    row = rowR;
                }
                if (item.Content.DataCol != null)
                {
                    col = item.Content.DataCol;
                }
                else
                {
                    col = colR;
                }
                if (item.Content.DataSizeX != null)
                {
                    dataSizeX = item.Content.DataSizeX;
                }
                else
                {
                    dataSizeX = 6;
                }
                if (item.Content.DataSizeY != null)
                {
                    dataSizeY = item.Content.DataSizeY;
                }
                else
                {
                    dataSizeY = 8;
                }
                <li class="gridster-el" data-row="@row" data-col="@col" data-sizex="@dataSizeX" data-sizey="@dataSizeY">
                    <h2>@item.Content.Title</h2>
                    @Html.Raw(item.Content.Text.ParseHTML().Truncate())
                    @if (item.Content.Text.ParseHTML().Truncate().Contains("..."))
                    {
                        <span> (<a href="@Url.Action("Details", "Content", new {IDcontent = item.Content.IDcontent, Username = Model.Username})">more</a>)</span>
                    }
                    @if (Request.IsAuthenticated)
                    {
                        <div class="text-right">
                                <span class="btn btn-special glyphicon glyphicon-user" aria-hidden="true" style="word-spacing: -10px; padding: 0 0 0 0;"> @item.Content.User.Username</span>
                                <a href="@Url.Action("Edit", "Content", new {IDcontent = item.Content.IDcontent, Username = Model.Username})" target="_blank"><span class="btn btn-special glyphicon glyphicon-pencil" aria-hidden="true"></span></a>
                                <a href="@Url.Action("Details", "Content", new {IDcontent = item.Content.IDcontent, Username = Model.Username})" target="_blank"><span class="btn btn-special glyphicon glyphicon-list" aria-hidden="true"></span></a>
                                <a href="@Url.Action("DeleteContent", "Page", new {IDcontent = item.Content.IDcontent, IDpage = Model.IDpage, Username = Model.Username})"><span class="btn btn-special glyphicon glyphicon-remove" aria-hidden="true"></span></a>
</div>
                    }
                </li>
                col++;
                colR++;
                if (colR > 4)
                {
                    row++;
                    rowR++;
                    col = 1;
                    colR = 1;
                }
            }
        </ul>
    </div>
    if (brojac < @Model.PageContents.GroupBy(a => a.City.CityName).Count())
    {
        brojac++;
    }
}

<script>
    var gridster = [];
    var gridsterSerialized = [];
    var pageID = @Model.IDpage;
    console.log(pageID);
    var numberOfLocations = @Model.PageContents.GroupBy(a => a.City.CityName).Count();

    $("#submit2").on("click", function () {

        for (i = 0; i < numberOfLocations; i++) {
            gridster[i] = $("#gr-" + i + " ul").gridster({
                namespace: "#gr-" + i,
                widget_margins: [5, 5],
                widget_base_dimensions: [35, 35],
                resize: {
                    enabled: true
                },
                serialize_params: function($w, wgd) {
                    return {
                        id: @Model.IDpage,
                        col: wgd.col,
                        row: wgd.row,
                        size_x: wgd.size_x,
                        size_y: wgd.size_y
                    };
                }
            }).data("gridster");
            var s = gridster[i].serialize();
            console.log(s);

            $.ajax({
                type: "POST",
                url: "@Url.Action("UpdateLayout", "Page")",
                datatype: "json",
            traditional: true,
            data: {
                'Values': JSON.stringify(s),
                'IDpage': pageID
            }
        });
        }
    });
    $(function () { //DOM Ready
        for (i = 0; i < numberOfLocations; i++) {
            gridster[i] = $("#gr-" + i + " ul").gridster({
                namespace: "#gr-" + i,
                widget_margins: [5, 5],
                widget_base_dimensions: [35, 35],
                resize: {
                    enabled: true
                },
                serialize_params: function($w, wgd) {
                    return {
                        id: @Model.IDpage,
                        col: wgd.col,
                        row: wgd.row,
                        size_x: wgd.size_x,
                        size_y: wgd.size_y
                    };
                }
            }).data("gridster");
        }

    });

</script>